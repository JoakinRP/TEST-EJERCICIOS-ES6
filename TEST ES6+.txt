EJERCICIO 1

const sumar = (a = 10, b = 5) => console.log(a + b);


1.1 Ejecutar la función sin pasar ningún parámetro

sumar(); // Resultado: 15

1.2 Ejecutar la función pasando un solo parámetro

sumar(20); // Resultado: 25 (a = 20, b toma el valor por defecto de 5)

1.3 Ejecutar la función pasando los dos parámetros

sumar(30, 40); // Resultado: 70 (a = 30, b = 40)


EJERCICIO 2 DESTRUCTURING


2.1 Destructuring del objeto  GAME

const game = { title: 'The last us 2', gender: ['action', 'zombie', 'survival'], year: 2020 };

const { title, gender, year } = game;

console.log(title); // 'The last us 2'
console.log(gender); // ['action', 'zombie', 'survival']
console.log(year); // 2020


2.2 Destructuring del array  FRUITS

const fruits = ['Banana', 'Strawberry', 'Orange'];

const [fruit1, fruit2, fruit3] = fruits;

console.log(fruit1); // 'Banana'
console.log(fruit2); // 'Strawberry'
console.log(fruit3); // 'Orange'


2.3 Destructuring de la función ANIMALFUNCTION


const animalFunction = () => {
    return { name: 'Bengal Tiger', race: 'Tiger' };
};

const { name, race } = animalFunction();

console.log(name); // 'Bengal Tiger'
console.log(race); // 'Tiger'


2.4 Destructuring del objeto CAR

const car = { name: 'Mazda 6', itv: [2015, 2011, 2020] };

const { name, itv } = car;
const [year1, year2, year3] = itv;

console.log(name); // 'Mazda 6'
console.log(itv); // [2015, 2011, 2020]
console.log(year1); // 2015
console.log(year2); // 2011
console.log(year3); // 2020


EJERCICIO 3 SPREAD OPERATOR


3.1 Copia de POINTSLIST usando Spread Operator

const pointsList = [32, 54, 21, 64, 75, 43];

const pointsListCopy = [...pointsList];

console.log(pointsListCopy); // [32, 54, 21, 64, 75, 43]


3.2 Copia de TOY usando Spread Operator

const toy = { name: 'Bus laiyiar', date: '20-30-1995', color: 'multicolor' };

const toyCopy = { ...toy };

console.log(toyCopy); // { name: 'Bus laiyiar', date: '20-30-1995', color: 'multicolor' }


3.3 Fusionar dos arrays usando Spread operator


const pointsList = [32, 54, 21, 64, 75, 43];
const pointsList2 = [54, 87, 99, 65, 32];

const combinedPoints = [...pointsList, ...pointsList2];

console.log(combinedPoints); // [32, 54, 21, 64, 75, 43, 54, 87, 99, 65, 32]


3.4 Fusionar dos objetos usando Spread Operator


const toy = { name: 'Bus laiyiar', date: '20-30-1995', color: 'multicolor' };
const toyUpdate = { lights: 'rgb', power: ['Volar like a dragon', 'MoonWalk'] };

const updatedToy = { ...toy, ...toyUpdate };

console.log(updatedToy);
// { name: 'Bus laiyiar', date: '20-30-1995', color: 'multicolor', lights: 'rgb', power: ['Volar like a dragon', 'MoonWalk'] }



3.5 Crear una copia de COLORS eliminando la posición 2


const colors = ['rojo', 'azul', 'amarillo', 'verde', 'naranja'];

const colorsCopy = [...colors.slice(0, 2), ...colors.slice(3)];

console.log(colorsCopy); // ['rojo', 'azul', 'verde', 'naranja']
console.log(colors); // ['rojo', 'azul', 'amarillo', 'verde', 'naranja']



EJERCICIO 4


4.1 Devolver un array con los nombres usando .map()

const users = [
	{id: 1, name: 'Abel'},
	{id: 2, name: 'Julia'},
	{id: 3, name: 'Pedro'},
	{id: 4, name: 'Amanda'}
];

const names = users.map(user => user.name);

console.log(names); // ['Abel', 'Julia', 'Pedro', 'Amanda']



4.2 Cambiar el nombre a 'Anacleto' si empieza por 'A'

const users = [
	{id: 1, name: 'Abel'},
	{id: 2, name: 'Julia'},
	{id: 3, name: 'Pedro'},
	{id: 4, name: 'Amanda'}
];

const updatedNames = users.map(user => 
    user.name.startsWith('A') ? 'Anacleto' : user.name
);

console.log(updatedNames); // ['Anacleto', 'Julia', 'Pedro', 'Anacleto']


4.3 Añadir "(Visitado)" a los nombres con ISVISITED = TRUE

const cities = [
	{isVisited: true, name: 'Tokyo'}, 
	{isVisited: false, name: 'Madagascar'},
	{isVisited: true, name: 'Amsterdam'}, 
	{isVisited: false, name: 'Seul'}
];

const updatedCities = cities.map(city => 
    city.isVisited ? `${city.name} (Visitado)` : city.name
);

console.log(updatedCities); 
// ['Tokyo (Visitado)', 'Madagascar', 'Amsterdam (Visitado)', 'Seul']


EJERCICIO 5


5.1 Filtrar valores mayores que 18

const ages = [22, 14, 24, 55, 65, 21, 12, 13, 90];

const olderThan18 = ages.filter(age => age > 18);

console.log(olderThan18); // [22, 24, 55, 65, 21, 90]


5.2 Filtrar valores pares

const ages = [22, 14, 24, 55, 65, 21, 12, 13, 90];

const evenNumbers = ages.filter(age => age % 2 === 0);

console.log(evenNumbers); // [22, 14, 24, 12, 90]


5.3 Filtrar streamers con GAMEMOREPLAYED igual a 'League of Legends'


const streamers = [
	{name: 'Rubius', age: 32, gameMorePlayed: 'Minecraft'},
	{name: 'Ibai', age: 25, gameMorePlayed: 'League of Legends'}, 
	{name: 'Reven', age: 43, gameMorePlayed: 'League of Legends'},
	{name: 'AuronPlay', age: 33, gameMorePlayed: 'Among Us'}
];

const lolStreamers = streamers.filter(streamer => streamer.gameMorePlayed === 'League of Legends');

console.log(lolStreamers);
// [
//     { name: 'Ibai', age: 25, gameMorePlayed: 'League of Legends' },
//     { name: 'Reven', age: 43, gameMorePlayed: 'League of Legends' }
// ]


5.4 Filtrar streamers cuyo NAME incluye la letra 'u'


const streamers = [
	{name: 'Rubius', age: 32, gameMorePlayed: 'Minecraft'},
	{name: 'Ibai', age: 25, gameMorePlayed: 'League of Legends'},
	{name: 'Reven', age: 43, gameMorePlayed: 'League of Legends'},
	{name: 'AuronPlay', age: 33, gameMorePlayed: 'Among Us'}
];

const streamersWithU = streamers.filter(streamer => streamer.name.includes('u'));

console.log(streamersWithU);
// [
//     { name: 'Rubius', age: 32, gameMorePlayed: 'Minecraft' },
//     { name: 'AuronPlay', age: 33, gameMorePlayed: 'Among Us' }
// ]



5.5 Filtrar streamers cuyo GAMEMOREPLAYED incluye 'Legends' y actualizar a MAYÚSCULAS si age > 35


const streamers = [
	{name: 'Rubius', age: 32, gameMorePlayed: 'Minecraft'},
	{name: 'Ibai', age: 25, gameMorePlayed: 'League of Legends'},
	{name: 'Reven', age: 43, gameMorePlayed: 'League of Legends'},
	{name: 'AuronPlay', age: 33, gameMorePlayed: 'Among Us'}
];

const legendsStreamers = streamers.filter(streamer => {
    if (streamer.gameMorePlayed.includes('Legends')) {
        if (streamer.age > 35) {
            streamer.gameMorePlayed = streamer.gameMorePlayed.toUpperCase();
        }
        return true;
    }
    return false;
});

console.log(legendsStreamers);
// [
//     { name: 'Ibai', age: 25, gameMorePlayed: 'League of Legends' },
//     { name: 'Reven', age: 43, gameMorePlayed: 'LEAGUE OF LEGENDS' }
// ]


5.6 Si introduzco "Ru"

// Consola
[{ name: 'Rubius', age: 32, gameMorePlayed: 'Minecraft' }]


5.6 Si introduzco "i"

// Consola
[
  { name: 'Rubius', age: 32, gameMorePlayed: 'Minecraft' },
  { name: 'Ibai', age: 25, gameMorePlayed: 'League of Legends' }
]


6.1 Encontrar el numero 100


const numbers = [32, 21, 63, 95, 100, 67, 43];

const foundNumber = numbers.find(number => number === 100);

console.log(foundNumber); // 100


6.2 Encontrar la pelicula del año 2010


const movies = [
	{title: 'Madagascar', stars: 4.5, date: 2015},
	{title: 'Origen', stars: 5, date: 2010},
	{title: 'Your Name', stars: 5, date: 2016}
];

const movie2010 = movies.find(movie => movie.date === 2010);

console.log(movie2010); 
// { title: 'Origen', stars: 5, date: 2010 }



6.3 Fusionar alien con mutación usando .find() y spread operator


const aliens = [
	{name: 'Zalamero', planet: 'Eden', age: 4029},
	{name: 'Paktu', planet: 'Andromeda', age: 32},
	{name: 'Cucushumushu', planet: 'Marte', age: 503021}
];
const mutations = [
	{name: 'Porompompero', description: 'Hace que el alien pueda adquirir la habilidad de tocar el tambor'},
	{name: 'Fly me to the moon', description: 'Permite volar, solo y exclusivamente a la luna'},
	{name: 'Andando que es gerundio', description: 'Invoca a un señor mayor como Personal Trainer'}
];

// Encontrar el alien de nombre 'Cucushumushu'
const targetAlien = aliens.find(alien => alien.name === 'Cucushumushu');

// Encontrar la mutación 'Porompompero'
const targetMutation = mutations.find(mutation => mutation.name === 'Porompompero');

// Fusionar los objetos
const fusedAlien = { ...targetAlien, mutation: { ...targetMutation } };

console.log(fusedAlien);
/*
{
  name: 'Cucushumushu',
  planet: 'Marte',
  age: 503021,
  mutation: {
    name: 'Porompompero',
    description: 'Hace que el alien pueda adquirir la habilidad de tocar el tambor'
  }
}
*/



7.1 Suma de todas las notas


const exams = [
    { name: 'Yuyu Cabeza Crack', score: 5 }, 
    { name: 'Maria Aranda Jimenez', score: 1 }, 
    { name: 'Cristóbal Martínez Lorenzo', score: 6 }, 
    { name: 'Mercedez Regrera Brito', score: 7 },
    { name: 'Pamela Anderson', score: 3 },
    { name: 'Enrique Perez Lijó', score: 6 },
    { name: 'Pedro Benitez Pacheco', score: 8 },
    { name: 'Ayumi Hamasaki', score: 4 },
    { name: 'Robert Kiyosaki', score: 2 },
    { name: 'Keanu Reeves', score: 10 }
];

const totalScore = exams.reduce((acc, exam) => acc + exam.score, 0);

console.log(totalScore); // 52


7.2 Suma de las notas de los aprobados


const totalApprovedScore = exams
    .filter(exam => exam.score >= 5) // Filtramos los aprobados
    .reduce((acc, exam) => acc + exam.score, 0); // Sumamos las notas

console.log(totalApprovedScore); // 42



7.3 Media de las notas de todos los exámenes


const averageScore = exams.reduce((acc, exam) => acc + exam.score, 0) / exams.length;

console.log(averageScore); // 5.2



EJERCICIO 8


const videogames = [
    { name: 'Final Fantasy VII', genders: ['RPG'], score: 9.5 },
    { name: 'Assasins Creed Valhala', genders: ['Aventura', 'RPG'], score: 4.5 },
    { name: 'The last of Us 2', genders: ['Acción', 'Aventura'], score: 9.8 },
    { name: 'Super Mario Bros', genders: ['Plataforma'], score: 8.5 },
    { name: 'Genshin Impact', genders: ['RPG', 'Aventura'], score: 7.5 },
    { name: 'Legend of Zelda: Breath of the wild', genders: ['RPG'], score: 10 },
];

// Filtrar videojuegos por género 'RPG'
const rpgGames = videogames.filter(game => game.genders.includes('RPG'));

// Calcular la media de las puntuaciones
const averageScore = rpgGames.reduce((acc, game) => acc + game.score, 0) / rpgGames.length;

console.log(rpgGames);
/*
[
  { name: 'Final Fantasy VII', genders: ['RPG'], score: 9.5 },
  { name: 'Assasins Creed Valhala', genders: ['Aventura', 'RPG'], score: 4.5 },
  { name: 'Genshin Impact', genders: ['RPG', 'Aventura'], score: 7.5 },
  { name: 'Legend of Zelda: Breath of the wild', genders: ['RPG'], score: 10 }
]
*/
console.log(averageScore); // 7.875


EJERCICIO 9


const movies = [
  {
    title: "Bracula: Condemor II",
    duration: 192,
    categories: ["comedia", "aventura"],
  },
  {
    title: "Spider-Man: No Way Home",
    duration: 122,
    categories: ["aventura", "acción"],
  },
  {
    title: "The Voices",
    duration: 223,
    categories: ["comedia", "thriller"],
  },
  {
    title: "Shrek",
    duration: 111,
    categories: ["comedia", "aventura", "animación"],
  },
];

let uniqueCategories = [];

// Usamos for...of para recorrer el array de películas
for (const movie of movies) {
  // Recorremos las categorías de cada película
  for (const category of movie.categories) {
    // Si la categoría no está en el array de categorías únicas, la añadimos
    if (!uniqueCategories.includes(category)) {
      uniqueCategories.push(category);
    }
  }
}

console.log(uniqueCategories);


EJERCICIO 10


const users = [
  {
    name: "Alberto",
    favoritesSounds: {
      waves: { format: "mp3", volume: 50 },
      rain: { format: "ogg", volume: 60 },
      firecamp: { format: "mp3", volume: 80 },
    },
  },
  {
    name: "Antonio",
    favoritesSounds: {
      waves: { format: "mp3", volume: 30 },
      shower: { format: "ogg", volume: 55 },
      train: { format: "mp3", volume: 60 },
    },
  },
  {
    name: "Pedro",
    favoritesSounds: {
      shower: { format: "mp3", volume: 50 },
      train: { format: "ogg", volume: 60 },
      firecamp: { format: "mp3", volume: 80 },
    },
  },
  {
    name: "Cristina",
    favoritesSounds: {
      waves: { format: "mp3", volume: 67 },
      wind: { format: "ogg", volume: 35 },
 


EJERCICIO 11


const users = [
  {
    name: "Alberto",
    favoritesSounds: {
      waves: { format: "mp3", volume: 50 },
      rain: { format: "ogg", volume: 60 },
      firecamp: { format: "mp3", volume: 80 },
    },
  },
  {
    name: "Antonio",
    favoritesSounds: {
      waves: { format: "mp3", volume: 30 },
      shower: { format: "ogg", volume: 55 },
      train: { format: "mp3", volume: 60 },
    },
  },
  {
    name: "Pedro",
    favoritesSounds: {
      shower: { format: "mp3", volume: 50 },
      train: { format: "ogg", volume: 60 },
      firecamp: { format: "mp3", volume: 80 },
    },
  },
  {
    name: "Cristina",
    favoritesSounds: {
      waves: { format: "mp3", volume: 67 },
      wind: { format: "ogg", volume: 35 },
      firecamp: { format: "mp3", volume: 60 },
    },
  },
];

// Objeto para contar las veces que aparece cada sonido en favoritos
let soundCount = {};

// Recorremos el array de usuarios con for...of
for (const user of users) {
  // Recorremos los sonidos favoritos de cada usuario con for...in
  for (const sound in user.favoritesSounds) {
    // Si el sonido ya está en el objeto soundCount, incrementamos el contador
    if (soundCount[sou



EJERCICIO 12


EJEMPLO 1 BUSCANDO COLORES

const colors = ["red", "blue", "green", "yellow", "purple"];

console.log(findArrayIndex(colors, "green"));  // 2
console.log(findArrayIndex(colors, "blue"));   // 1
console.log(findArrayIndex(colors, "orange")); // -1


EJEMPLO 2 BUSCANDO PERSONAJES PRINCIPALES


const mainCharacters = [
  "Luke",
  "Leia",
  "Han Solo",
  "Chewbacca",
  "Rey",
  "Anakin",
  "Obi-Wan",
];

console.log(findArrayIndex(mainCharacters, "Leia"));   // 1
console.log(findArrayIndex(mainCharacters, "Obi-Wan")); // 6
console.log(findArrayIndex(mainCharacters, "Yoda"));    // -1


EJERCICIO 13

EJEMPLO 1 ELIMINAR UN VALOR NO PRESENTE


const fruits = ["apple", "banana", "cherry", "date"];

console.log(removeItem(fruits, "banana"));  // ["apple", "cherry", "date"]
console.log(removeItem(fruits, "kiwi"));    // ["apple", "banana", "cherry", "date"]



EJEMPLO 2 ELIMINAR UN PERSONAJE PRINCIPAL


const mainCharacters = [
  "Luke",
  "Leia",
  "Han Solo",
  "Chewbacca",
  "Rey",
  "Anakin",
  "Obi-Wan",
];

console.log(removeItem(mainCharacters, "Leia")); // ["Luke", "Han Solo", "Chewbacca", "Rey", "Anakin", "Obi-Wan"]
console.log(removeItem(mainCharacters, "Obi-Wan")); // ["Luke", "Leia", "Han Solo", "Chewbacca", "Rey", "Anakin"]
console.log(removeItem(mainCharacters, "Yoda"));   // ["Luke", "Leia", "Han Solo", "Chewbacca", "Rey", "Anakin", "Obi-Wan"]


EJERCICIO 14


function rollDice(numFaces) {
  // Generar un número aleatorio entre 1 y numFaces
  const roll = Math.floor(Math.random() * numFaces) + 1;
  return roll;
}


EJERCICIO 15


function swap(array, index1, index2) {
  // Usamos una variable temporal para intercambiar los valores
  const temp = array[index1];
  array[index1] = array[index2];
  array[index2] = temp;

  // Retornamos el array con los valores intercambiados
  return array;
}



